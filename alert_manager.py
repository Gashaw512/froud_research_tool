import json
import smtplib
# from email.mime.text import MimeText
from email.mime.text import MIMEText
# from email.mime.multipart import MimeMultipart
from email.mime.multipart import MIMEMultipart
from datetime import datetime

class AlertManager:
    def __init__(self, config_file='alert_config.json'):
        self.config = self.load_config(config_file)
    
    def load_config(self, config_file):
        """Load alert configuration"""
        default_config = {
            'email_alerts': False,
            'slack_webhook': None,
            'high_risk_threshold': 0.7,
            'alert_recipients': [],
            'smtp_server': 'smtp.gmail.com',
            'smtp_port': 587
        }
        
        try:
            with open(config_file, 'r') as f:
                user_config = json.load(f)
                default_config.update(user_config)
        except FileNotFoundError:
            print(f"Alert config not found, using defaults. Create {config_file} to customize.")
        
        return default_config
    
    def generate_alert_summary(self, research_data):
        """Generate alert summary for high-confidence findings"""
        high_risk_findings = []
        
        for result in research_data['analysis_results']:
            for scenario in result['generated_scenarios']:
                if scenario['confidence_score'] >= self.config['high_risk_threshold']:
                    high_risk_findings.append(scenario)
        
        return high_risk_findings
    
    def send_email_alert(self, findings):
        """Send email alert for high-risk findings"""
        if not self.config['email_alerts'] or not self.config['alert_recipients']:
            return
        
        try:
            # Create email content
            subject = f"ðŸš¨ High-Risk Fraud Patterns Detected - {datetime.now().strftime('%Y-%m-%d')}"
            
            html_content = f"""
            <html>
            <body>
                <h2>Automated Fraud Research Alert</h2>
                <p><strong>Generated:</strong> {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}</p>
                <p><strong>High-Risk Findings:</strong> {len(findings)}</p>
                
                <h3>Top High-Risk Scenarios:</h3>
            """
            
            for i, finding in enumerate(findings[:5], 1):  # Top 5 findings
                html_content += f"""
                <div style="border: 1px solid #ccc; padding: 10px; margin: 10px 0;">
                    <h4>{i}. {finding['title']}</h4>
                    <p><strong>Risk Level:</strong> <span style="color: red">{finding['risk_level']}</span></p>
                    <p><strong>Confidence:</strong> {finding['confidence_score']}</p>
                    <p><strong>Clari5 Scenario:</strong> {finding['scenario_type']}</p>
                    <p><strong>Source:</strong> {finding['source_reference']['source']} - {finding['source_reference']['title'][:100]}...</p>
                    <p><strong>Description:</strong> {finding['description']}</p>
                </div>
                """
            
            html_content += """
                <hr>
                <p><em>This alert was automatically generated by the Fraud Pattern Research Tool.</em></p>
            </body>
            </html>
            """
            
            # Send email (you would configure SMTP settings in alert_config.json)
            print("ðŸ“§ Email alert prepared (configure SMTP settings to enable sending)")
            print(f"   Subject: {subject}")
            print(f"   Findings: {len(findings)} high-risk scenarios")
            
        except Exception as e:
            print(f"Error sending email alert: {e}")
    
    def generate_dashboard_data(self, research_data):
        """Generate data for a simple dashboard"""
        dashboard = {
            'timestamp': research_data['metadata']['generated_at'],
            'summary': research_data['executive_summary'],
            'top_findings': [],
            'pattern_trends': {},
            'source_breakdown': {}
        }
        
        # Get top 5 findings by confidence
        all_scenarios = []
        for result in research_data['analysis_results']:
            all_scenarios.extend(result['generated_scenarios'])
        
        all_scenarios.sort(key=lambda x: x['confidence_score'], reverse=True)
        dashboard['top_findings'] = all_scenarios[:5]
        
        # Source breakdown
        sources = {}
        for item in research_data['raw_data']:
            source = item['source']
            sources[source] = sources.get(source, 0) + 1
        dashboard['source_breakdown'] = sources
        
        return dashboard

# Create alert configuration file
def create_alert_config():
    config = {
        "email_alerts": True,
        "high_risk_threshold": 0.7,
        "alert_recipients": ["your-email@company.com"],
        "smtp_server": "smtp.gmail.com",
        "smtp_port": 587,
        "email_sender": "fraud-research-tool@company.com",
        "slack_webhook": "https://hooks.slack.com/services/your-webhook-here"
    }
    
    with open('alert_config.json', 'w') as f:
        json.dump(config, f, indent=2)
    
    print("Created alert_config.json - please update with your actual settings")